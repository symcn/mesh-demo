node:
  id: "sidecar~10.13.112.55~comsumer-blue-7685566fdb-qz96w.mesh-demo~mesh-demo.svc.cluster.local"
  cluster: "comsumer.mesh-demo"
static_resources:
  listeners:
  - name: listener_dubbo_8888
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8888
    filter_chains:
    - filters:
        - name: envoy.filters.network.dubbo_proxy
          typed_config:
            "@type": type.googleapis.com/envoy.config.filter.network.dubbo_proxy.v2alpha1.DubboProxy
            stat_prefix: dubbo_incomming_stats
            protocol_type: Dubbo
            serialization_type: Hessian2
            route_config:
              - name: local_route_user
                interface: UserProvider
                routes:
                  - match:
                      method:
                        name:
                          safe_regex:
                            google_re2: {}
                            regex: "(.*?)"
                    route:
                      cluster: user-provider
              - name: local_route_order
                interface: OrderProvider
                routes:
                  - match:
                      method:
                        name:
                          safe_regex:
                            google_re2: {}
                            regex: .*
                    route:
                      cluster: order-provider
            dubbo_filters:
              - name: envoy.filters.dubbo.router
  clusters:
  - name: user-provider
    connect_timeout: 1s
    hosts:
    - socket_address:
        address: 127.0.0.1
        port_value: 20000
  - name: order-provider
    connect_timeout: 1s
    hosts:
      - socket_address:
          address: 127.0.0.1
          port_value: 20001
admin:
  access_log_path: "/tmp/envoy-test.log"
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 19000

#stats_config:
#  use_all_default_tags: false
#  stats_tags:
#    - tag_name: cluster_name
#      regex: "^cluster\\.((.+?(\\..+?\\.svc\\.cluster\\.local)?)\\.)"
#    - tag_name: tcp_prefix
#      regex: "^tcp\\.((.*?)\\.)\\w+?$"
#    - regex: "(response_code=\\.=(.+?);\\.;)|_rq(_(\\.d{3}))$"
#      tag_name: response_code
#    - tag_name: response_code_class
#      regex: "_rq(_(\\dxx))$"
#    - tag_name: http_conn_manager_listener_prefix
#      regex: "^listener(?=\\.).*?\\.http\\.(((?:[_.[:digit:]]*|[_\\[\\]aAbBcCdDeEfF[:digit:]]*))\\.)"
#    - tag_name: http_conn_manager_prefix
#      regex: "^http\\.(((?:[_.[:digit:]]*|[_\\[\\]aAbBcCdDeEfF[:digit:]]*))\\.)"
#    - tag_name: listener_address
#      regex: "^listener\\.(((?:[_.[:digit:]]*|[_\\[\\]aAbBcCdDeEfF[:digit:]]*))\\.)"
#    - tag_name: mongo_prefix
#      regex: "^mongo\\.(.+?)\\.(collection|cmd|cx_|op_|delays_|decoding_)(.*?)$"
#    - regex: "(reporter=\\.=(.+?);\\.;)"
#      tag_name: reporter
#    - regex: "(source_namespace=\\.=(.+?);\\.;)"
#      tag_name: source_namespace
#    - regex: "(source_workload=\\.=(.+?);\\.;)"
#      tag_name: source_workload
#    - regex: "(source_workload_namespace=\\.=(.+?);\\.;)"
#      tag_name: source_workload_namespace
#    - regex: "(source_principal=\\.=(.+?);\\.;)"
#      tag_name: source_principal
#    - regex: "(source_app=\\.=(.+?);\\.;)"
#      tag_name: source_app
#    - regex: "(source_version=\\.=(.+?);\\.;)"
#      tag_name: source_version
#    - regex: "(destination_namespace=\\.=(.+?);\\.;)"
#      tag_name: destination_namespace
#    - regex: "(destination_workload=\\.=(.+?);\\.;)"
#      tag_name: destination_workload
#    - regex: "(destination_workload_namespace=\\.=(.+?);\\.;)"
#      tag_name: destination_workload_namespace
#    - regex: "(destination_principal=\\.=(.+?);\\.;)"
#      tag_name: destination_principal
#    - regex: "(destination_app=\\.=(.+?);\\.;)"
#      tag_name: destination_app
#    - regex: "(destination_version=\\.=(.+?);\\.;)"
#      tag_name: destination_version
#    - regex: "(destination_service=\\.=(.+?);\\.;)"
#      tag_name: destination_service
#    - regex: "(destination_service_name=\\.=(.+?);\\.;)"
#      tag_name: destination_service_name
#    - regex: "(destination_service_namespace=\\.=(.+?);\\.;)"
#      tag_name: destination_service_namespace
#    - regex: "(request_protocol=\\.=(.+?);\\.;)"
#      tag_name: request_protocol
#    - regex: "(response_flags=\\.=(.+?);\\.;)"
#      tag_name: response_flags
#    - regex: "(grpc_response_status=\\.=(.*?);\\.;)"
#      tag_name: grpc_response_status
#    - regex: "(connection_security_policy=\\.=(.+?);\\.;)"
#      tag_name: connection_security_policy
#    - regex: "(permissive_response_code=\\.=(.+?);\\.;)"
#      tag_name: permissive_response_code
#    - regex: "(permissive_response_policyid=\\.=(.+?);\\.;)"
#      tag_name: permissive_response_policyid
#    - regex: "(cache\\.(.+?)\\.)"
#      tag_name: cache
#    - regex: "(component\\.(.+?)\\.)"
#      tag_name: component
#    - regex: "(tag\\.(.+?)\\.)"
#      tag_name: tag
#    - regex: "(source_canonical_service=\\.=(.+?);\\.;)"
#      tag_name: source_canonical_service
#    - regex: "(destination_canonical_service=\\.=(.+?);\\.;)"
#      tag_name: destination_canonical_service
#    - regex: "(source_canonical_revision=\\.=(.+?);\\.;)"
#      tag_name: source_canonical_revision
#    - regex: "(destination_canonical_revision=\\.=(.+?);\\.;)"
#      tag_name: destination_canonical_revision
#  stats_matcher:
#    inclusion_list:
#      patterns:
#        - prefix: reporter=
#        - prefix: component
#        - prefix: cluster_manager
#        - prefix: listener_manager
#        - prefix: http_mixer_filter
#        - prefix: tcp_mixer_filter
#        - prefix: server
#        - prefix: cluster.xds-grpc
#        - suffix: ssl_context_update_by_sds
